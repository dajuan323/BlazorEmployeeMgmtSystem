@implements IDisposable
@if (allState.ShowOvertime)
{
    <div class="container mt-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="card border-danger shadow-lg">
                    <div class="card-header"><h4 class="float-start">Manage Employee Overtime</h4></div>
                </div>
                <div class="card-header" style="max-height:500px; overflow-x:hidden; overflow-y:scroll;">
                    <div class="card-body">
                        @{
                            var Tool = (new List<string>() { "Search", "ExcelExport", "PdfExport", "Print" });
                        }
                        <SfGrid DataSource="@Overtimes" AllowPaging="true" AllowSorting="true" Toolbar=@Tool AllowExcelExport="true"
                            @ref="DefaultGrid" AllowPdfExport="true">
                            <GridPageSettings PageSize="5"></GridPageSettings>
                            <GridEvents OnToolbarClick="ToolbarClickHandler" TValue="Overtime"></GridEvents>
                            <GridColumns>
                                <GridColumn Field=@nameof(Vacation.EmployeeId) HeaderText="ID"></GridColumn>
                                <GridColumn HeaderText="Type">
                                    <Template>
                                        @{
                                            var item = (context as Overtime);
                                            <div>
                                                @item!.OvertimeType!.Name
                                            </div>
                                        }
                                    </Template>
                                </GridColumn>
                                <GridColumn Field=@nameof(Overtime.StartDate) HeaderText="Start Date"></GridColumn>
                                <GridColumn Field=@nameof(Overtime.EndDate) HeaderText="End Date"></GridColumn>
                                <GridColumn Field=@nameof(Overtime.NumberOfDays) HeaderText="Number of days"></GridColumn>
                                <GridColumn HeaderText="Action">
                                    <Template>
                                        @{
                                            var employee = (context as Overtime);
                                            <div>
                                                <i class="bi bi-pencil text-info" id="cursorStyle" @onclick="()=> EditClicked(employee!)"></i>
                                                <i class="bi bi-trash text-danger" id="cursorStyle" @onclick="()=> DeleteClicked(employee!)"></i>
                                            </div>
                                        }
                                    </Template>
                                </GridColumn>
                            </GridColumns>
                        </SfGrid>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<OvertimeDialog @ref="overtimeDialog"
                ItemModel="ItemModel"
                OvertimeTypes="OvertimeTypes"
                HandleSaveOperationEvent="HandleSaveOperationEvent" />

@code {
    private SfGrid<Overtime>? DefaultGrid;
    OvertimeDialog? overtimeDialog;
    Overtime ItemModel = new();
    public List<Overtime> Overtimes { get; set; } = new();
    public List<OvertimeType> OvertimeTypes { get; set; } = new();
    protected async override Task OnInitializedAsync()
    {
        await GetTypes();
        await GetOvertime();
        allState.Action += StateHasChanged;
    }

    private async Task GetTypes() => OvertimeTypes = await overtimeTypeServices.GetAll(Constants.OvertimeTypeBaseUrl);

    private async Task GetOvertime() => Overtimes = await overtimeServices.GetAll(Constants.OvertimeBaseUrl);

    void OpenDialog() => overtimeDialog?.OpenDialog();

    private async Task HandleSaveOperationEvent(Overtime ot)
    {
        var result = await overtimeServices.Update(ot, Constants.OvertimeBaseUrl);
        bool successCheck = await DisplayMessage(result.Flag, result.Message);
        if (successCheck)
        {
            ItemModel = new();
            await GetOvertime();
        }
    }

    private void EditClicked(Overtime ot)
    {
        ItemModel = ot;
        OpenDialog();
    }

    private async Task DeleteClicked(Overtime ot)
    {
        bool confirm = await dialogService
            .ConfirmAsync($"Are you sure you want to delete this?", "Confirm Delete");
        if (!confirm) return;

        var response = await overtimeServices.DeleteById(ot.EmployeeId, Constants.OvertimeBaseUrl);
        var result = await DisplayMessage(response.Flag, response.Message);
        if (result)
            await GetOvertime();
    }

    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            await dialogService.AlertAsync(message, "Operation successful");
            return true;
        }
        else
        {
            await dialogService.AlertAsync(message, "Alert!");
            return false;
        }
    }

    // Excel export / PDF Export
    public async Task ToolbarClickHandler(ClickEventArgs args)
    {
        if (args.Item.Text == "Excel Export")
            await this.DefaultGrid!.ExcelExport()!;
        if (args.Item.Text == "PDF Export")
            await this.DefaultGrid!.PdfExport()!;
    }

    public void Dispose() => allState.Action -= StateHasChanged;
}
